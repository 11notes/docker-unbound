name: "dns"

x-lockdown: &lockdown
  # prevents write access to the image itself
  read_only: true
  # prevents any process within the container to gain more privileges
  security_opt:
    - "no-new-privileges=true"

services:
  redis:
    image: "11notes/redis:7.4.5"
    <<: *lockdown
    environment:
      REDIS_PASSWORD: "${REDIS_PASSWORD}"
      TZ: "Europe/Zurich"
    networks:
      backend:
    volumes:
      - "redis.etc:/redis/etc"
      - "redis.var:/redis/var"
    tmpfs:
      - "/run:uid=1000,gid=1000"
    restart: "always"

  unbound:
    depends_on:
      redis:
        condition: "service_healthy"
        restart: true
    image: "11notes/unbound:1.23.1"
    <<: *lockdown
    environment:
      TZ: "Europe/Zurich"
    volumes:
      - "unbound.etc:/unbound/etc"
    ports:
      - "53:53/udp"
      - "53:53/tcp"
    networks:
      frontend:
      backend:
    sysctls:
      net.ipv4.ip_unprivileged_port_start: 53
    restart: "always"

  # ╔═════════════════════════════════════════════════════╗
  # ║     DEMO CONTAINER - DO NOT USE IN PRODUCTION!      ║
  # ╚═════════════════════════════════════════════════════╝
  # used to view the redis database
  demo-redis-gui:
    image: "redis/redisinsight"
    environment:
      RI_REDIS_HOST0: "redis"
      RI_REDIS_PASSWORD0: "${REDIS_PASSWORD}"
      TZ: "Europe/Zurich"
    ports:
      - "3000:5540/tcp"
    networks:
      frontend:
      backend:

  # ╔═════════════════════════════════════════════════════╗
  # ║     DEMO CONTAINER - DO NOT USE IN PRODUCTION!      ║
  # ╚═════════════════════════════════════════════════════╝
  # used to generate 100k DNS queries
  dnspyre:
    depends_on:
      unbound:
        condition: "service_healthy"
        restart: true
    image: "11notes/distroless:dnspyre"
    command: "--server unbound -c 10 -n 3 -t A --prometheus ':3000' https://raw.githubusercontent.com/11notes/static/refs/heads/main/src/benchmarks/dns/fqdn/10000"
    read_only: true
    environment:
      TZ: "Europe/Zurich"
    networks:
      frontend:

volumes:
  redis.etc:
  redis.var:
  unbound.etc:

networks:
  frontend:
  backend:
    internal: true